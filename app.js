// Port to host the server on
const port = process.env.PORT || 8000;

// Main imports
const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const flash = require('connect-flash');

// File I/O imports
const path = require('path');
const fs = require('fs');

// const database = require("./database/db");
const database = require('./models');

// // Syncs tables (for testing only - { force: true })
database.sequelize.sync();

// Create an object representing the application
const app = express();

// Allows different types of HTML requests (JSON + Body parser)
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Configuring session object from express-session
app.use(
    session({
        secret: 'mysecretkeygoeshere',
        resave: true,
        saveUninitialized: true
    })
);

// Configuring flash object from connect-flash
app.use(flash());

// Static files are stored in the "/public" directory
app.use(express.static(path.join(__dirname, '/public')));

// Configuring the template engine
app.set('views', path.join(__dirname, '/views'));
app.set('view engine', 'pug');

// Formats the HTML generated by Pug neatly
app.locals.pretty = true;

// Middleware called in between new requests
app.use((req, res, next) => {
    // Passes flash variables to res.locals when redirecting to render flash messages
    res.locals.successMsg = req.flash('success_msg');
    res.locals.errorMsg = req.flash('error_msg');

    // Passes session to persist login after redirect
    if (req.path != '/u/logout') {
        // Do not keep object if trying to log out
        res.locals.session = req.session;
    }

    // Call the next function in the middleware queue
    next();
});

app.use((req, res, next) => {
    // Declare one array for ads and another containing ad files names
    res.locals.ads = [];
    files = fs.readdirSync('./public/images/ads');

    // Add a random ad to the ad array then remove it from file array
    for (let i = 0; i < 4; i++) {
        const randomFileIndex = Math.floor(Math.random() * files.length);
        res.locals.ads.push(files[randomFileIndex]);
        files.splice(randomFileIndex, 1);
    }

    // Call the next function in the middleware queue
    next();
});

app.use((req, res, next) => {
    // Checks what URL the user is coming from and stores that so it may be highlighted in the nav upon page load
    if (req.originalUrl.includes('/u/')) {
        res.locals.active = 'u';
    } else if (req.originalUrl.includes('/p/')) {
        res.locals.active = 'p';
    } else if (req.originalUrl.includes('/m/')) {
        res.locals.active = 'm';
    } else {
        const contact_us = ['/contact-us', '/purchase-ad', '/about'];
        contact_us.forEach(url => {
            if (req.originalUrl === url) {
                res.locals.active = 'c';
            }
        });
    }

    // Call the next function in the middleware queue
    next();
});

// Setting up the routers
app.use('/', require('./routes'));
app.use('/u', require('./routes/user'));
app.use('/p', require('./routes/profile'));
app.use('/m', require('./routes/media'));

// Catch unused routes for 404 (Must be at the end)
app.use('*', (req, res, next) => {
    res.status(404);
    res.render('error', { title: 'Error: Page Not Found' });
});

// Listen for connection requests to our application
app.listen(port, () => {
    console.log(`Listening to requests on http://localhost:${port}`);
});
