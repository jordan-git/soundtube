// Port to host the server on
const port = process.env.PORT || 8000;

// Main imports
const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const flash = require('connect-flash');

// File I/O imports
const path = require('path');

// const database = require("./database/db");
const database = require('./models');

// // Syncs tables (for testing only - { force: true })
database.sequelize.sync();

// Create an object representing the application
const app = express();

// Allows different types of HTML requests (JSON + Body parser)
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Configuring session object from express-session
app.use(
    session({
        secret: 'mysecretkeygoeshere',
        resave: true,
        saveUninitialized: true
    })
);

// Configuring flash object from connect-flash
app.use(flash());

// Static files are stored in the "/public" directory
app.use(express.static(path.join(__dirname, '/public')));

// Configuring the template engine
app.set('views', path.join(__dirname, '/views'));
app.set('view engine', 'pug');

// Formats the HTML generated by Pug neatly
app.locals.pretty = true;

app.use((req, res, next) => {
    // Passes flash variables to res.locals when redirecting to render flash messages
    res.locals.successMsg = req.flash('success_msg');
    res.locals.errorMsg = req.flash('error_msg');

    // Passes session to persist login after redirect
    if (req.path != '/u/logout') {
        // Do not keep object if trying to log out
        res.locals.session = req.session;
    }

    next();
});

// Setting up the routers
app.use('/', require('./routes'));
app.use('/u', require('./routes/user'));

// Catch unused routes for 404 (Must be at the end)
app.use('*', (req, res, next) => {
    res.status(404);
    res.render('not-found', { title: 'Page Not Found' });
});

// Listen for connection requests to our application
app.listen(port, () => {
    console.log(`Listening to requests on http://localhost:${port}`);
});
